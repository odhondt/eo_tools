- For 1 burst, using dask:

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   453    407.4 MiB    407.4 MiB           1   @profile
   454                                         def _process_bursts_dask(
   455                                             prm,
   456                                             sec,
   457                                             tmp_prm,
   458                                             tmp_sec,
   459                                             dir_out,
   460                                             dir_dem,
   461                                             naz,
   462                                             nrg,
   463                                             min_burst,
   464                                             max_burst,
   465                                             dem_upsampling,
   466                                             dem_buffer_arc_sec,
   467                                             dem_force_download,
   468                                             order,
   469                                         ):
   470    407.4 MiB      0.0 MiB           1       luts = []
   471    407.4 MiB      0.0 MiB           2       prof_tmp = dict(
   472    407.4 MiB      0.0 MiB           1           width=nrg,
   473    407.4 MiB      0.0 MiB           1           height=naz,
   474    407.4 MiB      0.0 MiB           1           count=1,
   475    407.4 MiB      0.0 MiB           1           dtype="complex64",
   476    407.4 MiB      0.0 MiB           1           driver="GTiff",
   477    407.4 MiB      0.0 MiB           1           nodata=np.nan,
   478                                             )
   479    407.4 MiB      0.0 MiB           1       warnings.filterwarnings("ignore", category=rio.errors.NotGeoreferencedWarning)
   480                                             # process individual bursts
   481                                         
   482    407.4 MiB      0.0 MiB           1       import xarray as xr
   483    407.4 MiB      0.0 MiB           1       import rioxarray as riox
   484    407.4 MiB      0.0 MiB           1       import dask.array as da
   485                                         
   486                                             # with rio.open(tmp_prm, "w", **prof_tmp) as ds_prm:
   487                                             # with rio.open(tmp_sec, "w", **prof_tmp) as ds_sec:
   488                                         
   489                                             # TODO: write arr_p, arr_s in a dask array
   490                                             # make a xr dataset and write to disk with riox
   491                                         
   492    407.4 MiB      0.0 MiB           1       da_prm = da.zeros((naz, nrg), chunks=(prm.lines_per_burst, -1), dtype=np.complex64)
   493    407.4 MiB      0.0 MiB           1       da_sec = da.zeros((naz, nrg), chunks=(sec.lines_per_burst, -1), dtype=np.complex64)
   494                                         
   495   5414.7 MiB      0.0 MiB           2       for burst_idx in range(min_burst, max_burst + 1):
   496    407.4 MiB      0.0 MiB           1           log.info(f"---- Processing burst {burst_idx} ----")
   497                                         
   498                                                 # compute geocoding LUTs (lookup tables) for master and slave bursts
   499    407.4 MiB      0.0 MiB           2           file_dem = prm.fetch_dem_burst(
   500    407.4 MiB      0.0 MiB           1               burst_idx,
   501    407.4 MiB      0.0 MiB           1               dir_dem,
   502    407.4 MiB      0.0 MiB           1               buffer_arc_sec=dem_buffer_arc_sec,
   503    407.4 MiB      0.0 MiB           1               force_download=dem_force_download,
   504                                                 )
   505   1019.8 MiB    612.5 MiB           2           az_p2g, rg_p2g, dem_profile = prm.geocode_burst(
   506    407.4 MiB      0.0 MiB           1               file_dem, burst_idx=burst_idx, dem_upsampling=dem_upsampling
   507                                                 )
   508   1450.3 MiB    430.4 MiB           2           az_s2g, rg_s2g, dem_profile = sec.geocode_burst(
   509   1019.8 MiB      0.0 MiB           1               file_dem, burst_idx=burst_idx, dem_upsampling=dem_upsampling
   510                                                 )
   511                                         
   512                                                 # read primary and secondary burst rasters
   513   1715.9 MiB    265.6 MiB           1           arr_p = prm.read_burst(burst_idx, True)
   514   1981.5 MiB    265.7 MiB           1           arr_s = sec.read_burst(burst_idx, True)
   515                                         
   516                                                 # deramp secondary
   517   2246.9 MiB    265.4 MiB           1           pdb_s = sec.deramp_burst(burst_idx)
   518   2777.0 MiB    530.2 MiB           1           arr_s_de = arr_s * np.exp(1j * pdb_s)  # .astype(np.complex64)
   519                                         
   520                                                 # project slave LUT into master grid
   521   3307.3 MiB    530.2 MiB           1           az_s2p, rg_s2p = coregister(arr_p, az_p2g, rg_p2g, az_s2g, rg_s2g)
   522                                         
   523                                                 # warp raster secondary and deramping phase
   524   3837.6 MiB    530.3 MiB           1           arr_s2p = align(arr_p, arr_s_de, az_s2p, rg_s2p, order=order)
   525   4131.0 MiB    293.4 MiB           1           pdb_s2p = align(arr_p, pdb_s, az_s2p, rg_s2p, order=order)
   526                                         
   527                                                 # reramp slave
   528   4131.0 MiB      0.0 MiB           1           arr_s2p = arr_s2p * np.exp(-1j * pdb_s2p)  # .astype(np.complex64)
   529                                         
   530                                                 # compute topographic phases
   531   4396.0 MiB    265.0 MiB           1           rg_p = np.zeros(arr_s.shape[0])[:, None] + np.arange(0, arr_s.shape[1])
   532   4661.1 MiB    265.1 MiB           1           pht_p = prm.phi_topo(rg_p).reshape(*arr_p.shape)
   533   4926.2 MiB    265.1 MiB           1           pht_s = sec.phi_topo(rg_s2p.ravel()).reshape(*arr_p.shape)
   534   5191.3 MiB    265.1 MiB           1           pha_topo = np.exp(-1j * (pht_p - pht_s)).astype(np.complex64)
   535                                         
   536   5414.2 MiB    222.9 MiB           1           lut_da = _make_da_from_dem(np.stack((az_p2g, rg_p2g)), dem_profile)
   537   5414.7 MiB      0.5 MiB           1           lut_da.rio.to_raster(f"{dir_out}/lut_{burst_idx}.tif")
   538   5414.7 MiB      0.0 MiB           1           luts.append(f"{dir_out}/lut_{burst_idx}.tif")
   539                                         
   540   5414.7 MiB      0.0 MiB           1           arr_s2p = arr_s2p * pha_topo
   541                                         
   542   5414.7 MiB      0.0 MiB           1           first_line = (burst_idx - min_burst) * prm.lines_per_burst
   543   5414.7 MiB      0.0 MiB           1           da_prm[first_line : first_line + prm.lines_per_burst] = arr_p
   544   5414.7 MiB      0.0 MiB           1           da_sec[first_line : first_line + prm.lines_per_burst] = arr_s2p
   545                                                 # ds_prm.write(
   546                                                 #     arr_p, 1, window=Window(0, first_line, nrg, prm.lines_per_burst)
   547                                                 # )
   548                                                 # ds_sec.write(
   549                                                 #     arr_s2p,
   550                                                 #     1,
   551                                                 #     window=Window(0, first_line, nrg, prm.lines_per_burst),
   552                                                 #     )
   553   5414.7 MiB      0.0 MiB           2       xr.DataArray(
   554   5414.7 MiB      0.0 MiB           1           data=da_prm[None],
   555   5414.7 MiB      0.0 MiB           1           dims=("band", "y", "x"),
   556   5420.0 MiB      5.3 MiB           1       ).rio.to_raster(tmp_prm)
   557   5420.0 MiB      0.0 MiB           2       xr.DataArray(
   558   5420.0 MiB      0.0 MiB           1           data=da_sec[None],
   559   5420.0 MiB      0.0 MiB           1           dims=("band", "y", "x"),
   560   5420.0 MiB     -0.0 MiB           1       ).rio.to_raster(tmp_sec)
   561                                         
   562   5420.0 MiB      0.0 MiB           1       return luts

-----


Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   363   2441.8 MiB   2441.8 MiB           1   @profile
   364                                         def _process_bursts(
   365                                             prm,
   366                                             sec,
   367                                             tmp_prm,
   368                                             tmp_sec,
   369                                             dir_out,
   370                                             dir_dem,
   371                                             naz,
   372                                             nrg,
   373                                             min_burst,
   374                                             max_burst,
   375                                             dem_upsampling,
   376                                             dem_buffer_arc_sec,
   377                                             dem_force_download,
   378                                             order,
   379                                         ):
   380   2441.8 MiB      0.0 MiB           1       luts = []
   381   2441.8 MiB      0.0 MiB           2       prof_tmp = dict(
   382   2441.8 MiB      0.0 MiB           1           width=nrg,
   383   2441.8 MiB      0.0 MiB           1           height=naz,
   384   2441.8 MiB      0.0 MiB           1           count=1,
   385   2441.8 MiB      0.0 MiB           1           dtype="complex64",
   386   2441.8 MiB      0.0 MiB           1           driver="GTiff",
   387   2441.8 MiB      0.0 MiB           1           nodata=np.nan,
   388                                             )
   389   2441.8 MiB      0.0 MiB           1       warnings.filterwarnings("ignore", category=rio.errors.NotGeoreferencedWarning)
   390                                             # process individual bursts
   391   6867.2 MiB      0.0 MiB           2       with rio.open(tmp_prm, "w", **prof_tmp) as ds_prm:
   392   6867.2 MiB      0.0 MiB           2           with rio.open(tmp_sec, "w", **prof_tmp) as ds_sec:
   393                                         
   394   6867.2 MiB      0.0 MiB           2               for burst_idx in range(min_burst, max_burst + 1):
   395   2441.8 MiB      0.0 MiB           1                   log.info(f"---- Processing burst {burst_idx} ----")
   396                                         
   397                                                         # compute geocoding LUTs (lookup tables) for master and slave bursts
   398   2441.8 MiB      0.0 MiB           2                   file_dem = prm.fetch_dem_burst(
   399   2441.8 MiB      0.0 MiB           1                       burst_idx,
   400   2441.8 MiB      0.0 MiB           1                       dir_dem,
   401   2441.8 MiB      0.0 MiB           1                       buffer_arc_sec=dem_buffer_arc_sec,
   402   2441.8 MiB      0.0 MiB           1                       force_download=dem_force_download,
   403                                                         )
   404   2710.7 MiB    268.9 MiB           2                   az_p2g, rg_p2g, dem_profile = prm.geocode_burst(
   405   2441.8 MiB      0.0 MiB           1                       file_dem, burst_idx=burst_idx, dem_upsampling=dem_upsampling
   406                                                         )
   407   2933.2 MiB    222.5 MiB           2                   az_s2g, rg_s2g, dem_profile = sec.geocode_burst(
   408   2710.7 MiB      0.0 MiB           1                       file_dem, burst_idx=burst_idx, dem_upsampling=dem_upsampling
   409                                                         )
   410                                         
   411                                                         # read primary and secondary burst rasters
   412   3198.3 MiB    265.1 MiB           1                   arr_p = prm.read_burst(burst_idx, True)
   413   3463.3 MiB    265.1 MiB           1                   arr_s = sec.read_burst(burst_idx, True)
   414                                         
   415                                                         # deramp secondary
   416   3728.4 MiB    265.1 MiB           1                   pdb_s = sec.deramp_burst(burst_idx)
   417   4258.6 MiB    530.2 MiB           1                   arr_s_de = arr_s * np.exp(1j * pdb_s)  # .astype(np.complex64)
   418                                         
   419                                                         # project slave LUT into master grid
   420   4788.6 MiB    530.1 MiB           1                   az_s2p, rg_s2p = coregister(arr_p, az_p2g, rg_p2g, az_s2g, rg_s2g)
   421                                         
   422                                                         # warp raster secondary and deramping phase
   423   5318.9 MiB    530.2 MiB           1                   arr_s2p = align(arr_p, arr_s_de, az_s2p, rg_s2p, order=order)
   424   5584.0 MiB    265.1 MiB           1                   pdb_s2p = align(arr_p, pdb_s, az_s2p, rg_s2p, order=order)
   425                                         
   426                                                         # reramp slave
   427   5584.0 MiB      0.0 MiB           1                   arr_s2p = arr_s2p * np.exp(-1j * pdb_s2p)  # .astype(np.complex64)
   428                                         
   429                                                         # compute topographic phases
   430   5849.0 MiB    265.0 MiB           1                   rg_p = np.zeros(arr_s.shape[0])[:, None] + np.arange(0, arr_s.shape[1])
   431   6114.1 MiB    265.1 MiB           1                   pht_p = prm.phi_topo(rg_p).reshape(*arr_p.shape)
   432   6379.2 MiB    265.1 MiB           1                   pht_s = sec.phi_topo(rg_s2p.ravel()).reshape(*arr_p.shape)
   433   6644.3 MiB    265.1 MiB           1                   pha_topo = np.exp(-1j * (pht_p - pht_s)).astype(np.complex64)
   434                                         
   435   6867.2 MiB    222.9 MiB           1                   lut_da = _make_da_from_dem(np.stack((az_p2g, rg_p2g)), dem_profile)
   436   6867.2 MiB      0.0 MiB           1                   lut_da.rio.to_raster(f"{dir_out}/lut_{burst_idx}.tif")
   437   6867.2 MiB      0.0 MiB           1                   luts.append(f"{dir_out}/lut_{burst_idx}.tif")
   438                                         
   439   6867.2 MiB      0.0 MiB           1                   arr_s2p = arr_s2p * pha_topo
   440                                         
   441   6867.2 MiB      0.0 MiB           1                   first_line = (burst_idx - min_burst) * prm.lines_per_burst
   442   6867.2 MiB      0.0 MiB           2                   ds_prm.write(
   443   6867.2 MiB      0.0 MiB           1                       arr_p, 1, window=Window(0, first_line, nrg, prm.lines_per_burst)
   444                                                         )
   445   6867.2 MiB      0.0 MiB           2                   ds_sec.write(
   446   6867.2 MiB      0.0 MiB           1                       arr_s2p,
   447   6867.2 MiB      0.0 MiB           1                       1,
   448   6867.2 MiB      0.0 MiB           1                       window=Window(0, first_line, nrg, prm.lines_per_burst),
   449                                                         )
   450   6867.2 MiB      0.0 MiB           1       return luts

- For 3 bursts

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   453   1296.6 MiB   1296.6 MiB           1   @profile
   454                                         def _process_bursts_dask(
   455                                             prm,
   456                                             sec,
   457                                             tmp_prm,
   458                                             tmp_sec,
   459                                             dir_out,
   460                                             dir_dem,
   461                                             naz,
   462                                             nrg,
   463                                             min_burst,
   464                                             max_burst,
   465                                             dem_upsampling,
   466                                             dem_buffer_arc_sec,
   467                                             dem_force_download,
   468                                             order,
   469                                         ):
   470   1296.6 MiB      0.0 MiB           1       luts = []
   471   1296.6 MiB      0.0 MiB           2       prof_tmp = dict(
   472   1296.6 MiB      0.0 MiB           1           width=nrg,
   473   1296.6 MiB      0.0 MiB           1           height=naz,
   474   1296.6 MiB      0.0 MiB           1           count=1,
   475   1296.6 MiB      0.0 MiB           1           dtype="complex64",
   476   1296.6 MiB      0.0 MiB           1           driver="GTiff",
   477   1296.6 MiB      0.0 MiB           1           nodata=np.nan,
   478                                             )
   479   1296.6 MiB      0.0 MiB           1       warnings.filterwarnings("ignore", category=rio.errors.NotGeoreferencedWarning)
   480                                             # process individual bursts
   481                                         
   482   1296.6 MiB      0.0 MiB           1       import xarray as xr
   483   1296.6 MiB      0.0 MiB           1       import rioxarray as riox
   484   1296.6 MiB      0.0 MiB           1       import dask.array as da
   485                                         
   486                                             # with rio.open(tmp_prm, "w", **prof_tmp) as ds_prm:
   487                                             # with rio.open(tmp_sec, "w", **prof_tmp) as ds_sec:
   488                                         
   489                                             # TODO: write arr_p, arr_s in a dask array
   490                                             # make a xr dataset and write to disk with riox
   491                                         
   492   1296.6 MiB      0.0 MiB           1       da_prm = da.zeros((naz, nrg), chunks=(prm.lines_per_burst, -1), dtype=np.complex64)
   493   1296.6 MiB      0.0 MiB           1       da_sec = da.zeros((naz, nrg), chunks=(sec.lines_per_burst, -1), dtype=np.complex64)
   494                                         
   495   7884.9 MiB      0.0 MiB           4       for burst_idx in range(min_burst, max_burst + 1):
   496   6822.0 MiB      0.0 MiB           3           log.info(f"---- Processing burst {burst_idx} ----")
   497                                         
   498                                                 # compute geocoding LUTs (lookup tables) for master and slave bursts
   499   6822.0 MiB      0.0 MiB           6           file_dem = prm.fetch_dem_burst(
   500   6822.0 MiB      0.0 MiB           3               burst_idx,
   501   6822.0 MiB      0.0 MiB           3               dir_dem,
   502   6822.0 MiB      0.0 MiB           3               buffer_arc_sec=dem_buffer_arc_sec,
   503   6822.0 MiB      0.0 MiB           3               force_download=dem_force_download,
   504                                                 )
   505   6840.0 MiB    327.5 MiB           6           az_p2g, rg_p2g, dem_profile = prm.geocode_burst(
   506   6822.0 MiB      0.0 MiB           3               file_dem, burst_idx=burst_idx, dem_upsampling=dem_upsampling
   507                                                 )
   508   6858.1 MiB    254.4 MiB           6           az_s2g, rg_s2g, dem_profile = sec.geocode_burst(
   509   6840.0 MiB      0.0 MiB           3               file_dem, burst_idx=burst_idx, dem_upsampling=dem_upsampling
   510                                                 )
   511                                         
   512                                                 # read primary and secondary burst rasters
   513   7123.2 MiB    795.2 MiB           3           arr_p = prm.read_burst(burst_idx, True)
   514   7123.2 MiB    265.1 MiB           3           arr_s = sec.read_burst(burst_idx, True)
   515                                         
   516                                                 # deramp secondary
   517   7123.2 MiB    265.1 MiB           3           pdb_s = sec.deramp_burst(burst_idx)
   518   7123.2 MiB    530.2 MiB           3           arr_s_de = arr_s * np.exp(1j * pdb_s)  # .astype(np.complex64)
   519                                         
   520                                                 # project slave LUT into master grid
   521   7123.2 MiB    530.1 MiB           3           az_s2p, rg_s2p = coregister(arr_p, az_p2g, rg_p2g, az_s2g, rg_s2g)
   522                                         
   523                                                 # warp raster secondary and deramping phase
   524   7653.3 MiB   1616.7 MiB           3           arr_s2p = align(arr_p, arr_s_de, az_s2p, rg_s2p, order=order)
   525   7653.3 MiB    265.1 MiB           3           pdb_s2p = align(arr_p, pdb_s, az_s2p, rg_s2p, order=order)
   526                                         
   527                                                 # reramp slave
   528   7653.3 MiB      0.0 MiB           3           arr_s2p = arr_s2p * np.exp(-1j * pdb_s2p)  # .astype(np.complex64)
   529                                         
   530                                                 # compute topographic phases
   531   7653.3 MiB    264.8 MiB           3           rg_p = np.zeros(arr_s.shape[0])[:, None] + np.arange(0, arr_s.shape[1])
   532   7653.3 MiB    265.3 MiB           3           pht_p = prm.phi_topo(rg_p).reshape(*arr_p.shape)
   533   7653.3 MiB    265.1 MiB           3           pht_s = sec.phi_topo(rg_s2p.ravel()).reshape(*arr_p.shape)
   534   7653.3 MiB    265.1 MiB           3           pha_topo = np.exp(-1j * (pht_p - pht_s)).astype(np.complex64)
   535                                         
   536   7884.7 MiB    678.2 MiB           3           lut_da = _make_da_from_dem(np.stack((az_p2g, rg_p2g)), dem_profile)
   537   7884.9 MiB      0.7 MiB           3           lut_da.rio.to_raster(f"{dir_out}/lut_{burst_idx}.tif")
   538   7884.9 MiB      0.0 MiB           3           luts.append(f"{dir_out}/lut_{burst_idx}.tif")
   539                                         
   540   7884.9 MiB      0.0 MiB           3           arr_s2p = arr_s2p * pha_topo
   541                                         
   542   7884.9 MiB      0.0 MiB           3           first_line = (burst_idx - min_burst) * prm.lines_per_burst
   543   7884.9 MiB      0.0 MiB           3           da_prm[first_line : first_line + prm.lines_per_burst] = arr_p
   544   7884.9 MiB      0.0 MiB           3           da_sec[first_line : first_line + prm.lines_per_burst] = arr_s2p
   545                                                 # ds_prm.write(
   546                                                 #     arr_p, 1, window=Window(0, first_line, nrg, prm.lines_per_burst)
   547                                                 # )
   548                                                 # ds_sec.write(
   549                                                 #     arr_s2p,
   550                                                 #     1,
   551                                                 #     window=Window(0, first_line, nrg, prm.lines_per_burst),
   552                                                 #     )
   553   7884.9 MiB      0.0 MiB           2       xr.DataArray(
   554   7884.9 MiB      0.0 MiB           1           data=da_prm[None],
   555   7884.9 MiB      0.0 MiB           1           dims=("band", "y", "x"),
   556   7884.6 MiB     -0.3 MiB           1       ).rio.to_raster(tmp_prm)
   557   7884.6 MiB      0.0 MiB           2       xr.DataArray(
   558   7884.6 MiB      0.0 MiB           1           data=da_sec[None],
   559   7884.6 MiB      0.0 MiB           1           dims=("band", "y", "x"),
   560   7884.6 MiB     -0.0 MiB           1       ).rio.to_raster(tmp_sec)
   561                                         
   562   7884.6 MiB      0.0 MiB           1       return luts

   - no dask

   Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   363   3356.7 MiB   3356.7 MiB           1   @profile
   364                                         def _process_bursts(
   365                                             prm,
   366                                             sec,
   367                                             tmp_prm,
   368                                             tmp_sec,
   369                                             dir_out,
   370                                             dir_dem,
   371                                             naz,
   372                                             nrg,
   373                                             min_burst,
   374                                             max_burst,
   375                                             dem_upsampling,
   376                                             dem_buffer_arc_sec,
   377                                             dem_force_download,
   378                                             order,
   379                                         ):
   380   3356.7 MiB      0.0 MiB           1       luts = []
   381   3356.7 MiB      0.0 MiB           2       prof_tmp = dict(
   382   3356.7 MiB      0.0 MiB           1           width=nrg,
   383   3356.7 MiB      0.0 MiB           1           height=naz,
   384   3356.7 MiB      0.0 MiB           1           count=1,
   385   3356.7 MiB      0.0 MiB           1           dtype="complex64",
   386   3356.7 MiB      0.0 MiB           1           driver="GTiff",
   387   3356.7 MiB      0.0 MiB           1           nodata=np.nan,
   388                                             )
   389   3356.7 MiB      0.0 MiB           1       warnings.filterwarnings("ignore", category=rio.errors.NotGeoreferencedWarning)
   390                                             # process individual bursts
   391   8177.9 MiB      0.0 MiB           2       with rio.open(tmp_prm, "w", **prof_tmp) as ds_prm:
   392   8177.9 MiB      0.0 MiB           2           with rio.open(tmp_sec, "w", **prof_tmp) as ds_sec:
   393                                         
   394   8177.9 MiB      0.0 MiB           4               for burst_idx in range(min_burst, max_burst + 1):
   395   8145.6 MiB      0.0 MiB           3                   log.info(f"---- Processing burst {burst_idx} ----")
   396                                         
   397                                                         # compute geocoding LUTs (lookup tables) for master and slave bursts
   398   8145.6 MiB      0.0 MiB           6                   file_dem = prm.fetch_dem_burst(
   399   8145.6 MiB      0.0 MiB           3                       burst_idx,
   400   8145.6 MiB      0.0 MiB           3                       dir_dem,
   401   8145.6 MiB      0.0 MiB           3                       buffer_arc_sec=dem_buffer_arc_sec,
   402   8145.6 MiB      0.0 MiB           3                       force_download=dem_force_download,
   403                                                         )
   404   8145.6 MiB    102.0 MiB           6                   az_p2g, rg_p2g, dem_profile = prm.geocode_burst(
   405   8145.6 MiB      0.0 MiB           3                       file_dem, burst_idx=burst_idx, dem_upsampling=dem_upsampling
   406                                                         )
   407   7946.4 MiB    116.7 MiB           6                   az_s2g, rg_s2g, dem_profile = sec.geocode_burst(
   408   7933.1 MiB      0.0 MiB           3                       file_dem, burst_idx=burst_idx, dem_upsampling=dem_upsampling
   409                                                         )
   410                                         
   411                                                         # read primary and secondary burst rasters
   412   7946.4 MiB    265.1 MiB           3                   arr_p = prm.read_burst(burst_idx, True)
   413   7946.4 MiB    265.1 MiB           3                   arr_s = sec.read_burst(burst_idx, True)
   414                                         
   415                                                         # deramp secondary
   416   7946.4 MiB    265.1 MiB           3                   pdb_s = sec.deramp_burst(burst_idx)
   417   7946.4 MiB    530.2 MiB           3                   arr_s_de = arr_s * np.exp(1j * pdb_s)  # .astype(np.complex64)
   418                                         
   419                                                         # project slave LUT into master grid
   420   7946.4 MiB    530.1 MiB           3                   az_s2p, rg_s2p = coregister(arr_p, az_p2g, rg_p2g, az_s2g, rg_s2g)
   421                                         
   422                                                         # warp raster secondary and deramping phase
   423   7946.4 MiB    530.2 MiB           3                   arr_s2p = align(arr_p, arr_s_de, az_s2p, rg_s2p, order=order)
   424   7946.4 MiB    265.1 MiB           3                   pdb_s2p = align(arr_p, pdb_s, az_s2p, rg_s2p, order=order)
   425                                         
   426                                                         # reramp slave
   427   7946.4 MiB      0.0 MiB           3                   arr_s2p = arr_s2p * np.exp(-1j * pdb_s2p)  # .astype(np.complex64)
   428                                         
   429                                                         # compute topographic phases
   430   7946.4 MiB    265.0 MiB           3                   rg_p = np.zeros(arr_s.shape[0])[:, None] + np.arange(0, arr_s.shape[1])
   431   7946.4 MiB    265.1 MiB           3                   pht_p = prm.phi_topo(rg_p).reshape(*arr_p.shape)
   432   7946.4 MiB    265.1 MiB           3                   pht_s = sec.phi_topo(rg_s2p.ravel()).reshape(*arr_p.shape)
   433   7946.4 MiB    265.1 MiB           3                   pha_topo = np.exp(-1j * (pht_p - pht_s)).astype(np.complex64)
   434                                         
   435   8177.8 MiB    678.2 MiB           3                   lut_da = _make_da_from_dem(np.stack((az_p2g, rg_p2g)), dem_profile)
   436   8177.9 MiB      0.6 MiB           3                   lut_da.rio.to_raster(f"{dir_out}/lut_{burst_idx}.tif")
   437   8177.9 MiB      0.0 MiB           3                   luts.append(f"{dir_out}/lut_{burst_idx}.tif")
   438                                         
   439   8177.9 MiB      0.0 MiB           3                   arr_s2p = arr_s2p * pha_topo
   440                                         
   441   8177.9 MiB      0.0 MiB           3                   first_line = (burst_idx - min_burst) * prm.lines_per_burst
   442   8177.9 MiB      0.0 MiB           6                   ds_prm.write(
   443   8177.9 MiB      0.0 MiB           3                       arr_p, 1, window=Window(0, first_line, nrg, prm.lines_per_burst)
   444                                                         )
   445   8177.9 MiB      0.0 MiB           6                   ds_sec.write(
   446   8177.9 MiB      0.0 MiB           3                       arr_s2p,
   447   8177.9 MiB      0.0 MiB           3                       1,
   448   8177.9 MiB      0.0 MiB           3                       window=Window(0, first_line, nrg, prm.lines_per_burst),
   449                                                         )
   450   8177.9 MiB      0.0 MiB           1       return luts